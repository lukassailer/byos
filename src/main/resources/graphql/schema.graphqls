type Query {
    allFilmsX: [Film!]!
    allFilms(first: Int, after: String, orderBy: OrderFilmsBy): FilmConnection!
    filmById(film_id: ID!): Film
    filmByIds(first: Int, after: String, film_id: [ID!]!): FilmConnection!
    allActors: [Actor!]!
    actorById(actor_id: ID!): Actor
    allCategories(first: Int, after: String): CategoryConnection!
    allStores(first: Int, after: String): StoreConnection!
    filmsByYear(first: Int, after: String, release_year: Int!): FilmConnection!
}

enum SortDirection {
    ASC
    DESC
}

type PageInfo {
    hasNextPage: Boolean!
    endCursor: String
}

type Film {
    film_id: ID!
    title: String!
    release_year: Int
    actors: [Actor!]!
    categories(first: Int, after: String): CategoryConnection!
    stores: StoreConnection!
    language: Language!
    original_language: Language
}

input OrderFilmsBy {
    film_id: SortDirection
    title: SortDirection
    release_year: SortDirection
}

type FilmConnection {
    edges: [FilmEdge!]!
    totalCount: Int!
    pageInfo: PageInfo!
}

type FilmEdge {
    node: Film!
    cursor: String!
}

type Actor {
    actor_id: ID!
    first_name: String!
    last_name: String!
    films(first: Int, after: String, orderBy: OrderFilmsBy, release_year: Int): FilmConnection!
}

type Store {
    store_id: ID!
    films(first: Int, after: String, orderBy: OrderFilmsBy): FilmConnection!
    inventories(first: Int, after: String): InventoryConnection!
}

type StoreConnection {
    edges: [StoreEdge!]!
    totalCount: Int!
    pageInfo: PageInfo!
}

type StoreEdge {
    node: Store!
    cursor: String!
}

type Language {
    language_id: ID!
    name: String!
}

type Inventory {
    inventory_id: ID!
    film: Film!
    # example where a intermediate type should be visible to the client
    # stock: Int!
}

type InventoryConnection {
    edges: [InventoryEdge!]!
    totalCount: Int!
    pageInfo: PageInfo!
}

type InventoryEdge {
    node: Inventory!
    cursor: String!
}

type Category {
    category_id: ID!
    name: String!
    films(first: Int, after: String, orderBy: OrderFilmsBy): FilmConnection!
    parent_category: Category
    subcategories: CategoryConnection!
}

type CategoryConnection {
    edges: [CategoryEdge!]!
    totalCount: Int!
    pageInfo: PageInfo!
}

type CategoryEdge {
    node: Category!
    cursor: String!
}
